name: '[Scheduled] Create OCI A1 Flex VM'

on:
  schedule:
    - cron: '0 0,12 * * *'
  workflow_dispatch:
    inputs:
      vm-name:
        description: '虛擬機器的名稱'
        required: true
        default: 'a1-flex-vm'
        type: string

env:
  OCI_REGION: ${{ secrets.OCI_REGION }}
  OCI_AVAILABILITY_DOMAIN: ${{ secrets.OCI_AVAILABILITY_DOMAIN }}
  OCI_COMPARTMENT_ID: ${{ secrets.OCI_COMPARTMENT_ID }}
  OCI_SUBNET_ID: ${{ secrets.OCI_SUBNET_ID }}
  OCI_IMAGE_OCID: ${{ secrets.OCI_IMAGE_OCID }}
  VM_SHAPE: 'VM.Standard.A1.Flex'
  OCPU_COUNT: 4
  MEMORY_IN_GB: 24

jobs:
  create-vm:
    runs-on: ubuntu-22.04
    outputs:
      time: ${{ steps.get-current-time.outputs.time }}
      vm_exists: ${{ steps.check-vm-exists.outputs.exists }}
      checked_vm_name: ${{ steps.determine-vm-name.outputs.vm_name }}
      creation_status: ${{ steps.create-vm-script.outputs.success }}
      attempt_count: ${{ steps.create-vm-script.outputs.attempt_count }}
      error_message: ${{ steps.create-vm-script.outputs.error_message }}
      vm_name: ${{ steps.create-vm-script.outputs.vm_name }}
      public_ip: ${{ steps.get-ip.outputs.public_ip }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: 獲取當前時間
        id: get-current-time
        run: echo "time=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT

      - name: 設置 Python and OCI CLI
        # (保持您現有的安裝配置步驟)
        run: |
          pip install oci-cli
          mkdir -p ~/.oci
          cat > ~/.oci/config << EOF
          [DEFAULT]
          user=${{ secrets.OCI_USER_ID }}
          fingerprint=${{ secrets.OCI_FINGERPRINT }}
          key_file=~/.oci/oci_api_key.pem
          tenancy=${{ secrets.OCI_TENANCY }}
          region=${{ env.OCI_REGION }}
          EOF
          echo "${{ secrets.OCI_API_KEY }}" > ~/.oci/oci_api_key.pem
          chmod 600 ~/.oci/config ~/.oci/oci_api_key.pem

      - name: 決定 VM 名稱
        id: determine-vm-name
        run: |
          VM_NAME=""
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VM_NAME="${{ github.event.inputs.vm-name }}"
          else
            VM_NAME="scheduled-a1-vm-$(date +'%Y%m%d-%H%M')"
          fi
          echo "vm_name=$VM_NAME" >> "$GITHUB_OUTPUT"

      # <-- 變更點：加固了此步驟的錯誤處理
      - name: 檢查同名 VM 是否已存在
        id: check-vm-exists
        run: |
          VM_NAME_TO_CHECK="${{ steps.determine-vm-name.outputs.vm_name }}"
          echo "正在檢查 VM 名稱: $VM_NAME_TO_CHECK"
          
          # 暫時禁用 "exit on error"，手動處理錯誤
          set +e
          EXISTING_VM_OCID=$(oci compute instance list \
            --compartment-id "${{ env.OCI_COMPARTMENT_ID }}" \
            --display-name "$VM_NAME_TO_CHECK" \
            --lifecycle-state RUNNING \
            --lifecycle-state PROVISIONING \
            --lifecycle-state STARTING \
            --query 'data[0].id' --raw-output)
          exit_code=$?
          set -e # 重新啟用

          # 檢查 oci 命令本身是否成功
          if [ $exit_code -ne 0 ]; then
            echo "⚠️  OCI CLI 查詢命令失敗，無法檢查 VM 是否存在。為安全起見，將跳過創建。"
            echo "exists=true" >> "$GITHUB_OUTPUT"
          elif [ -n "$EXISTING_VM_OCID" ] && [ "$EXISTING_VM_OCID" != "null" ]; then
            echo "❌ 發現已存在的同名 VM: $VM_NAME_TO_CHECK"
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "✅ 未發現同名的活動 VM，可以繼續。"
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: 生成 cloud-init 腳本
        if: steps.check-vm-exists.outputs.exists == 'false'
        run: |
          cat > cloud-init.txt << EOF
          #cloud-config
          # ... (內容不變)
          EOF

      - name: 執行創建 VM 的腳本
        id: create-vm-script
        if: steps.check-vm-exists.outputs.exists == 'false'
        env:
          INPUT_VM_NAME: ${{ steps.determine-vm-name.outputs.vm_name }}
        run: |
          chmod +x ./scripts/create_vm.sh
          ./scripts/create_vm.sh
      
      # ... 其他步驟 (等待、獲取IP) ...
      - name: 等待實例達到 RUNNING 狀態
      # ...
      - name: 獲取虛擬機器公網 IP
      # ...

  notify:
    # (notify job 保持不變)
    # ...
