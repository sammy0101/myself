name: '[Scheduled] Create OCI A1 Flex VM'

on:
  # 每天 UTC 时间 00:30 自动执行
  schedule:
    - cron: '30 0 * * *'
  # 保留手动触发功能
  workflow_dispatch:
    inputs:
      vm-name:
        description: 'Name of the VM instance'
        required: true
        default: 'a1-flex-vm'
        type: string

jobs:
  create-vm:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install OCI CLI and network tools
        run: |
          sudo apt-get update
          sudo apt-get install -y curl dnsutils jq
          pip install oci-cli
          oci --version

      - name: Configure OCI CLI
        run: |
          mkdir -p ~/.oci
          cat > ~/.oci/config << EOF
          [DEFAULT]
          user=${{ secrets.OCI_USER_ID }}
          fingerprint=${{ secrets.OCI_FINGERPRINT }}
          key_file=~/.oci/oci_api_key.pem
          tenancy=${{ secrets.OCI_TENANCY }}
          region=${{ secrets.OCI_REGION }}
          EOF
          
          cat > ~/.oci/oci_api_key.pem << EOF
          ${{ secrets.OCI_API_KEY }}
          EOF
          
          chmod 600 ~/.oci/config ~/.oci/oci_api_key.pem

      - name: Show current configuration and time
        run: |
          echo "当前时间: $(date)"
          echo "当前配置:"
          echo "区域: ${{ secrets.OCI_REGION }}"
          echo "可用性域: ${{ secrets.OCI_AVAILABILITY_DOMAIN }}"
          echo "实例形状: VM.Standard.A1.Flex (4 OCPU, 24GB RAM)"

      - name: Generate cloud-init script for root login
        run: |
          cat > cloud-init.txt << 'EOF'
          #cloud-config
          users:
            - name: root
              password: $ROOT_PASSWORD
              lock_passwd: false
          chpasswd:
            list: |
              root:$ROOT_PASSWORD
            expire: false
          runcmd:
            - sed -i 's/#PermitRootLogin yes/PermitRootLogin yes/g' /etc/ssh/sshd_config
            - sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config
            - systemctl restart sshd
          EOF
          
          sed -i "s/\$ROOT_PASSWORD/${{ secrets.ROOT_PASSWORD }}/g" cloud-init.txt

      - name: Create A1 Flex VM Instance with error handling
        id: create-vm
        run: |
          set +e  # 允许命令失败而不立即退出
          
          max_retries=2
          retry_delay=30
          
          # 如果是定时任务，使用固定名称；如果是手动触发，使用输入的名称
          if [ -n "${{ github.event.inputs.vm-name }}" ]; then
            VM_NAME="${{ github.event.inputs.vm-name }}"
          else
            VM_NAME="scheduled-a1-vm-$(date +%Y%m%d)"
          fi
          
          for i in $(seq 1 $max_retries); do
            echo "Attempt $i of $max_retries"
            
            # 运行 OCI 命令并捕获输出
            output=$(oci compute instance launch \
              --compartment-id "${{ secrets.OCI_COMPARTMENT_ID }}" \
              --availability-domain "${{ secrets.OCI_AVAILABILITY_DOMAIN }}" \
              --display-name "$VM_NAME" \
              --shape "VM.Standard.A1.Flex" \
              --shape-config '{"ocpus": 4, "memoryInGBs": 24}' \
              --image-id "${{ secrets.OCI_IMAGE_OCID }}" \
              --subnet-id "${{ secrets.OCI_SUBNET_ID }}" \
              --assign-public-ip true \
              --user-data-file ./cloud-init.txt 2>&1)
            
            exit_code=$?
            
            if [ $exit_code -eq 0 ]; then
              echo "✅ VM creation successful"
              echo "success=true" >> $GITHUB_OUTPUT
              echo "vm_name=$VM_NAME" >> $GITHUB_OUTPUT
              break
            else
              echo "❌ Attempt $i failed with exit code: $exit_code"
              echo "Error output: $output"
              
              # 检查是否是免费账户资源不足
              if echo "$output" | grep -i "out of host capacity\|insufficientcapacity\|outofcapacity"; then
                echo "free_tier_limit=true" >> $GITHUB_OUTPUT
                echo "error_type=free_tier_limit" >> $GITHUB_OUTPUT
                echo "error_message=免费账户资源限制: 当前区域或可用性域中没有足够的资源来创建虚拟机" >> $GITHUB_OUTPUT
              elif echo "$output" | grep -i "quota\|limit\|notavailable\|free tier\|insufficient"; then
                echo "free_tier_limit=true" >> $GITHUB_OUTPUT
                echo "error_type=free_tier_limit" >> $GITHUB_OUTPUT
                echo "error_message=免费账户资源限制，可能区域资源不足或已达免费额度上限" >> $GITHUB_OUTPUT
              elif echo "$output" | grep -i "timeout\|connection"; then
                echo "error_type=network_timeout" >> $GITHUB_OUTPUT
                echo "error_message=网络连接超时，请稍后重试" >> $GITHUB_OUTPUT
              else
                echo "error_type=other" >> $GITHUB_OUTPUT
                echo "error_message=其他错误，请检查配置和权限" >> $GITHUB_OUTPUT
              fi
              
              if [ $i -eq $max_retries ]; then
                echo "All attempts failed."
                break
              fi
              
              echo "Waiting $retry_delay seconds before retry..."
              sleep $retry_delay
            fi
          done
          
          set -e  # 恢复错误退出

      - name: Handle VM creation result
        if: always()
        run: |
          # 检查上一步的结果
          if [[ "${{ steps.create-vm.outputs.success }}" == "true" ]]; then
            echo "🎉 虚拟机创建成功!"
            echo "虚拟机名称: ${{ steps.create-vm.outputs.vm_name }}"
            echo "正在等待虚拟机初始化..."
          else
            echo "❌ 虚拟机创建失败"
            echo "错误类型: ${{ steps.create-vm.outputs.error_type }}"
            echo "错误信息: ${{ steps.create-vm.outputs.error_message }}"
            
            # 如果是免费账户资源不足，提供更多建议
            if [[ "${{ steps.create-vm.outputs.free_tier_limit }}" == "true" ]]; then
              echo ""
              echo "💡 Oracle Cloud 免费账户创建虚拟机失败建议:"
              echo "1. 尝试使用不同的可用性域 (Availability Domain)"
              echo "   - 当前可用性域: ${{ secrets.OCI_AVAILABILITY_DOMAIN }}"
              echo "   - 您可以在 OCI 控制台中查看其他可用性域"
              echo "2. 稍后重试 (几小时或第二天)，免费层资源可能会随时间释放"
              echo "3. 考虑使用不同的区域 (Region)"
              echo "   - 当前区域: ${{ secrets.OCI_REGION }}"
              echo "   - 一些较少人使用的区域可能有更多可用资源"
              echo "4. 尝试创建较小配置的实例 (如 1 OCPU, 6GB RAM)"
              echo "5. 免费账户有时在某些区域/时间段的资源确实很紧张，需要耐心尝试"
              echo ""
              echo "ℹ️  这是一个常见的免费账户问题，不是您的配置错误。"
            fi
            
            # 如果不是免费账户限制，可能是其他错误
            if [[ "${{ steps.create-vm.outputs.error_type }}" == "network_timeout" ]]; then
              echo ""
              echo "💡 网络超时建议:"
              echo "1. 稍后重试，可能是临时网络问题"
              echo "2. 检查您的网络连接"
            fi
            
            # 退出工作流并标记为失败
            exit 1
          fi

      - name: Wait for VM initialization
        if: steps.create-vm.outputs.success == 'true'
        run: |
          echo "等待虚拟机初始化完成..."
          sleep 60

      - name: Get VM Public IP
        if: steps.create-vm.outputs.success == 'true'
        id: get-ip
        run: |
          PUBLIC_IP=$(oci compute instance list \
            --compartment-id "${{ secrets.OCI_COMPARTMENT_ID }}" \
            --display-name "${{ steps.create-vm.outputs.vm_name }}" \
            --lifecycle-state RUNNING \
            --query 'data[0]."public-ip"' \
            --raw-output)
          
          if [ -z "$PUBLIC_IP" ] || [ "$PUBLIC_IP" == "null" ]; then
            echo "❌ 无法获取虚拟机公网IP"
            echo "这可能是因为:"
            echo "1. 虚拟机没有分配公网IP"
            echo "2. 虚拟机没有成功启动"
            exit 1
          fi
          
          echo "public_ip=${PUBLIC_IP}" >> $GITHUB_OUTPUT
          echo "VM Public IP: ${PUBLIC_IP}"

      - name: Print Success Message
        if: steps.create-vm.outputs.success == 'true'
        run: |
          echo "🎉 VM instance '${{ steps.create-vm.outputs.vm_name }}' 创建成功!"
          echo "📊 配置: VM.Standard.A1.Flex (4 OCPU, 24GB RAM)"
          echo "🔑 登录用户: root"
          echo "🔒 密码: 使用您在 Secrets 中设置的 ROOT_PASSWORD"
          echo "🌐 连接方式: ssh root@${{ steps.get-ip.outputs.public_ip }}"
          echo ""
          echo "⚠️  安全提示: 密码认证和 root 登录在生产环境中不推荐使用"

      - name: Print Final Result
        if: always()
        run: |
          echo "=== 执行结果汇总 ==="
          echo "执行时间: $(date)"
          if [[ "${{ steps.create-vm.outputs.success }}" == "true" ]]; then
            echo "✅ 工作流执行成功: 虚拟机已创建并配置完成"
            echo "虚拟机名称: ${{ steps.create-vm.outputs.vm_name }}"
            echo "公网 IP: ${{ steps.get-ip.outputs.public_ip }}"
          else
            echo "❌ 工作流执行失败: 虚拟机创建未成功"
            echo "错误类型: ${{ steps.create-vm.outputs.error_type }}"
            echo "请查看上述错误信息和建议"
          fi
