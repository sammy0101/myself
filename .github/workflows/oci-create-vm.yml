name: '[Scheduled] Create OCI A1 Flex VM'

on:
  schedule:
    - cron: '0 0,12 * * *'
  workflow_dispatch:
    inputs:
      vm-name:
        description: '虛擬機器的名稱'
        required: true
        default: 'a1-flex-vm'
        type: string

env:
  OCI_REGION: ${{ secrets.OCI_REGION }}
  OCI_AVAILABILITY_DOMAIN: ${{ secrets.OCI_AVAILABILITY_DOMAIN }}
  OCI_COMPARTMENT_ID: ${{ secrets.OCI_COMPARTMENT_ID }}
  OCI_SUBNET_ID: ${{ secrets.OCI_SUBNET_ID }}
  OCI_IMAGE_OCID: ${{ secrets.OCI_IMAGE_OCID }}
  VM_SHAPE: 'VM.Standard.A1.Flex'
  OCPU_COUNT: 4
  MEMORY_IN_GB: 24

jobs:
  create-vm:
    runs-on: ubuntu-22.04
    outputs:
      time: ${{ steps.get-current-time.outputs.time }}
      vm_exists: ${{ steps.check-vm-exists.outputs.exists }}
      checked_vm_name: ${{ steps.determine-vm-name.outputs.vm_name }}
      creation_status: ${{ steps.create-vm-script.outputs.success }}
      attempt_count: ${{ steps.create-vm-script.outputs.attempt_count }}
      error_message: ${{ steps.create-vm-script.outputs.error_message }}
      vm_name: ${{ steps.create-vm-script.outputs.vm_name }}
      public_ip: ${{ steps.get-ip.outputs.public_ip }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: 獲取當前時間
        id: get-current-time
        run: echo "time=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT

      # (OCI CLI 安裝配置步驟不變)
      - name: 設置 Python and OCI CLI
        # ... 此處省略了安裝步驟，保持您現有的即可 ...

      # <-- 變更點 1：新增「決定 VM 名稱」的步驟
      - name: 決定 VM 名稱
        id: determine-vm-name
        run: |
          VM_NAME=""
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VM_NAME="${{ github.event.inputs.vm-name }}"
            echo "使用手動觸發的名稱: $VM_NAME"
          else
            VM_NAME="scheduled-a1-vm-$(date +'%Y%m%d-%H%M')"
            echo "為定時任務生成唯一名稱: $VM_NAME"
          fi
          echo "vm_name=$VM_NAME" >> "$GITHUB_OUTPUT"

      # <-- 變更點 2：檢查邏輯簡化，總是執行
      - name: 檢查同名 VM 是否已存在
        id: check-vm-exists
        run: |
          VM_NAME_TO_CHECK="${{ steps.determine-vm-name.outputs.vm_name }}"
          echo "正在檢查 VM 名稱: $VM_NAME_TO_CHECK"
          
          EXISTING_VM_OCID=$(oci compute instance list \
            --compartment-id "${{ env.OCI_COMPARTMENT_ID }}" \
            --display-name "$VM_NAME_TO_CHECK" \
            --lifecycle-state RUNNING \
            --lifecycle-state PROVISIONING \
            --lifecycle-state STARTING \
            --query 'data[0].id' --raw-output)
            
          if [ -n "$EXISTING_VM_OCID" ] && [ "$EXISTING_VM_OCID" != "null" ]; then
            echo "❌ 發現已存在的同名 VM: $VM_NAME_TO_CHECK"
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "✅ 未發現同名的活動 VM，可以繼續。"
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      # (後續步驟的 if 條件保持不變)
      - name: 執行創建 VM 的腳本
        id: create-vm-script
        if: steps.check-vm-exists.outputs.exists == 'false'
        env:
          # <-- 變更點 3：總是傳遞已確定的 VM 名稱
          INPUT_VM_NAME: ${{ steps.determine-vm-name.outputs.vm_name }}
        run: |
          chmod +x ./scripts/create_vm.sh
          ./scripts/create_vm.sh
      
      # ... 其他步驟 (等待、獲取IP) ...

  notify:
    # (notify job 的邏輯不變，它依然可以正確處理 vm_exists 的情況)
    # ...
