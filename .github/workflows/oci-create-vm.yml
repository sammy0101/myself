name: '[Scheduled] Create OCI A1 Flex VM'

on:
  schedule:
    - cron: '0 0,12 * * *'
  workflow_dispatch:
    inputs:
      vm-name:
        description: '虛擬機器的名稱 (可選)'
        required: false
        default: 'manual-a1-flex-vm'
        type: string

env:
  # --- OCI 配置 ---
  OCI_REGION: ${{ secrets.OCI_REGION }}
  OCI_AVAILABILITY_DOMAIN: ${{ secrets.OCI_AVAILABILITY_DOMAIN }}
  OCI_COMPARTMENT_ID: ${{ secrets.OCI_COMPARTMENT_ID }}
  OCI_SUBNET_ID: ${{ secrets.OCI_SUBNET_ID }}
  OCI_IMAGE_OCID: ${{ secrets.OCI_IMAGE_OCID }}

  # --- VM 規格 ---
  VM_SHAPE: 'VM.Standard.A1.Flex'
  OCPU_COUNT: 4
  MEMORY_IN_GB: 24

jobs:
  create-vm:
    runs-on: ubuntu-22.04
    outputs:
      # <-- 修正點 1：新增 time 輸出，使其能被後續 job 讀取
      time: ${{ steps.get-current-time.outputs.time }}
      vm_name: ${{ steps.create-vm-script.outputs.vm_name }}
      public_ip: ${{ steps.get-ip.outputs.public_ip }}
      instance_ocid: ${{ steps.create-vm-script.outputs.instance_ocid }}
      creation_status: ${{ steps.create-vm-script.outputs.success }}
      attempt_count: ${{ steps.create-vm-script.outputs.attempt_count }}
      error_message: ${{ steps.create-vm-script.outputs.error_message }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: 獲取當前時間
        id: get-current-time
        run: echo "time=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT

      - name: 設置 Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: 手動安裝與配置 OCI CLI
        run: |
          echo "正在安裝 OCI CLI..."
          pip install oci-cli
          
          echo "正在配置 OCI CLI..."
          mkdir -p ~/.oci
          
          cat > ~/.oci/config << EOF
          [DEFAULT]
          user=${{ secrets.OCI_USER_ID }}
          fingerprint=${{ secrets.OCI_FINGERPRINT }}
          key_file=~/.oci/oci_api_key.pem
          tenancy=${{ secrets.OCI_TENANCY }}
          region=${{ env.OCI_REGION }}
          EOF
          
          echo "${{ secrets.OCI_API_KEY }}" > ~/.oci/oci_api_key.pem
          chmod 600 ~/.oci/config ~/.oci/oci_api_key.pem
          echo "✅ OCI CLI 手動安裝與配置完成。"

      - name: 驗證 OCI CLI 配置
        run: |
          echo "OCI CLI 版本: $(oci --version)"
          echo "正在驗證能否列出區劃..."
          oci iam compartment list --compartment-id-in-subtree true --all --output table --query 'data[0:1].{Name:name, OCID:id}'
          echo "✅ OCI 配置驗證成功"

      - name: 生成 cloud-init 腳本
        run: |
          cat > cloud-init.txt << EOF
          #cloud-config
          users:
            - name: root
              lock_passwd: false
          chpasswd:
            list: |
              root:${{ secrets.ROOT_PASSWORD }}
            expire: false
          runcmd:
            - sed -i 's/^#?PermitRootLogin.*/PermitRootLogin yes/g' /etc/ssh/sshd_config
            - sed -i 's/^#?PasswordAuthentication.*/PasswordAuthentication yes/g' /etc/ssh/sshd_config
            - systemctl restart sshd || systemctl restart ssh
          EOF
          echo "✅ cloud-init 腳本已生成"

      - name: 執行創建 VM 的腳本
        id: create-vm-script
        env:
          INPUT_VM_NAME: ${{ github.event.inputs.vm-name }}
        run: |
          chmod +x ./scripts/create_vm.sh
          ./scripts/create_vm.sh

      - name: 等待實例達到 RUNNING 狀態
        if: steps.create-vm-script.outputs.success == 'true'
        id: wait-for-running
        run: |
          INSTANCE_OCID="${{ steps.create-vm-script.outputs.instance_ocid }}"
          echo "等待實例 $INSTANCE_OCID 進入 RUNNING 狀態..."
          oci compute instance wait-for-state --instance-id "$INSTANCE_OCID" --wait-for-state "RUNNING" --wait-interval-seconds 15
          echo "✅ 實例現在處於 RUNNING 狀態"

      - name: 獲取虛擬機器公網 IP
        if: steps.create-vm-script.outputs.success == 'true'
        id: get-ip
        run: |
          INSTANCE_OCID="${{ steps.create-vm-script.outputs.instance_ocid }}"
          PUBLIC_IP=$(oci compute instance list-vnics --instance-id "$INSTANCE_OCID" --query 'data[0]."public-ip"' --raw-output)
          if [ -z "$PUBLIC_IP" ] || [ "$PUBLIC_IP" = "null" ]; then
            echo "❌ 無法獲取有效的公網IP地址"
            echo "public_ip=unknown" >> $GITHUB_OUTPUT
          else
            echo "✅ 虛擬機器公網 IP: $PUBLIC_IP"
            echo "public_ip=$PUBLIC_IP" >> $GITHUB_OUTPUT
          fi
          
  notify:
    name: Send Telegram Notification
    needs: create-vm
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: 發送 Telegram 通知
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          format: html
          message: |
            <b>OCI 虛擬機器建立結果</b>
            • <b>觸發方式:</b> ${{ github.event_name == 'workflow_dispatch' && '手動觸發' || '定時任務' }}
            • <b>執行時間:</b> ${{ needs.create-vm.outputs.time }}
            • <b>狀態:</b> ${{ needs.create-vm.outputs.creation_status == 'true' && '✅ 成功' || '❌ 失敗' }}
            • <b>嘗試次數:</b> ${{ needs.create-vm.outputs.attempt_count }}
            # <-- 修正點 2：修正訊息顯示邏輯
            • <b>訊息:</b> ${{ needs.create-vm.outputs.creation_status == 'true' && 'VM 創建成功' || needs.create-vm.outputs.error_message }}
            • <b>區域:</b> ${{ env.OCI_REGION }}
            • <b>詳情:</b> <a href="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}">查看日誌</a>
            ${{ needs.create-vm.outputs.creation_status == 'true' && format('
            <b>--- VM 資訊 ---</b>
            • <b>虛擬機器名稱:</b> {0}
            • <b>公網 IP:</b> {1}', needs.create-vm.outputs.vm_name, needs.create-vm.outputs.public_ip) || '' }}
