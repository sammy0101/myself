name: '[Scheduled] Create OCI A1 Flex VM'

on:
  schedule:
    # 每天 UTC 時間 0 點和 12 點各運行一次
    - cron: '0 0,12 * * *'
  workflow_dispatch:
    inputs:
      vm-name:
        description: '虛擬機器的名稱'
        required: true
        default: 'a1-flex-vm'
        type: string

env:
  OCI_REGION: ${{ secrets.OCI_REGION }}
  OCI_AVAILABILITY_DOMAIN: ${{ secrets.OCI_AVAILABILITY_DOMAIN }}
  OCI_COMPARTMENT_ID: ${{ secrets.OCI_COMPARTMENT_ID }}
  OCI_SUBNET_ID: ${{ secrets.OCI_SUBNET_ID }}
  OCI_IMAGE_OCID: ${{ secrets.OCI_IMAGE_OCID }}
  VM_SHAPE: 'VM.Standard.A1.Flex'
  OCPU_COUNT: 4
  MEMORY_IN_GB: 24

jobs:
  create-vm:
    runs-on: ubuntu-22.04
    outputs:
      time: ${{ steps.get-current-time.outputs.time }}
      vm_exists: ${{ steps.check-vm-exists.outputs.exists }}
      checked_vm_name: ${{ steps.determine-vm-name.outputs.vm_name }}
      creation_status: ${{ steps.create-vm-script.outputs.success }}
      attempt_count: ${{ steps.create-vm-script.outputs.attempt_count }}
      error_message: ${{ steps.create-vm-script.outputs.error_message }}
      vm_name: ${{ steps.create-vm-script.outputs.vm_name }}
      public_ip: ${{ steps.get-ip.outputs.public_ip }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: 獲取當前時間
        id: get-current-time
        run: echo "time=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT

      - name: 設置 Python and OCI CLI
        run: |
          pip install oci-cli
          mkdir -p ~/.oci
          cat > ~/.oci/config << EOF
          [DEFAULT]
          user=${{ secrets.OCI_USER_ID }}
          fingerprint=${{ secrets.OCI_FINGERPRINT }}
          key_file=~/.oci/oci_api_key.pem
          tenancy=${{ secrets.OCI_TENANCY }}
          region=${{ env.OCI_REGION }}
          EOF
          echo "${{ secrets.OCI_API_KEY }}" > ~/.oci/oci_api_key.pem
          chmod 600 ~/.oci/config ~/.oci/oci_api_key.pem

      - name: 決定 VM 名稱
        id: determine-vm-name
        run: |
          VM_NAME=""
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VM_NAME="${{ github.event.inputs.vm-name }}"
            echo "使用手動觸發的名稱: $VM_NAME"
          else
            VM_NAME="a1-flex-vm"
            echo "為定時任務使用固定名稱: $VM_NAME"
          fi
          echo "vm_name=$VM_NAME" >> "$GITHUB_OUTPUT"

      - name: 檢查同名 VM 是否已存在
        id: check-vm-exists
        run: |
          VM_NAME_TO_CHECK="${{ steps.determine-vm-name.outputs.vm_name }}"
          echo "正在檢查 VM 名稱: $VM_NAME_TO_CHECK"
          set +e
          EXISTING_VM_OCID=$(oci compute instance list \
            --compartment-id "${{ env.OCI_COMPARTMENT_ID }}" \
            --display-name "$VM_NAME_TO_CHECK" \
            --lifecycle-state RUNNING \
            --lifecycle-state PROVISIONING \
            --lifecycle-state STARTING \
            --query 'data[0].id' --raw-output)
          exit_code=$?
          set -e
          if [ $exit_code -ne 0 ]; then
            echo "⚠️  OCI CLI 查詢命令失敗，無法檢查 VM 是否存在。為安全起見，將跳過創建。"
            echo "exists=true" >> "$GITHUB_OUTPUT"
          elif [ -n "$EXISTING_VM_OCID" ] && [ "$EXISTING_VM_OCID" != "null" ]; then
            echo "❌ 發現已存在的同名 VM: $VM_NAME_TO_CHECK"
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "✅ 未發現同名的活動 VM，可以繼續。"
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: 生成 cloud-init 腳本
        if: steps.check-vm-exists.outputs.exists == 'false'
        run: |
          cat > cloud-init.txt << EOF
          #cloud-config
          users:
            - name: root
              lock_passwd: false
          chpasswd:
            list: |
              root:${{ secrets.ROOT_PASSWORD }}
            expire: false
          runcmd:
            - sed -i 's/^#?PermitRootLogin.*/PermitRootLogin yes/g' /etc/ssh/sshd_config
            - sed -i 's/^#?PasswordAuthentication.*/PasswordAuthentication yes/g' /etc/ssh/sshd_config
            - systemctl restart sshd || systemctl restart ssh
          EOF

      - name: 執行創建 VM 的腳本
        id: create-vm-script
        if: steps.check-vm-exists.outputs.exists == 'false'
        env:
          INPUT_VM_NAME: ${{ steps.determine-vm-name.outputs.vm_name }}
        run: |
          chmod +x ./scripts/create_vm.sh
          ./scripts/create_vm.sh
      
      - name: 等待實例達到 RUNNING 狀態
        if: steps.check-vm-exists.outputs.exists == 'false' && steps.create-vm-script.outputs.success == 'true'
        id: wait-for-running
        run: |
          oci compute instance wait-for-state --instance-id "${{ steps.create-vm-script.outputs.instance_ocid }}" --wait-for-state "RUNNING" --wait-interval-seconds 15

      - name: 獲取虛擬機器公網 IP
        if: steps.check-vm-exists.outputs.exists == 'false' && steps.create-vm-script.outputs.success == 'true'
        id: get-ip
        run: |
          PUBLIC_IP=$(oci compute instance list-vnics --instance-id "${{ steps.create-vm-script.outputs.instance_ocid }}" --query 'data[0]."public-ip"' --raw-output)
          echo "public_ip=$PUBLIC_IP" >> "$GITHUB_OUTPUT"

  notify:
    name: Send Telegram Notification
    needs: create-vm
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: 發送 Telegram 通知
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          format: html
          message: |
            ${{ needs.create-vm.outputs.vm_exists == 'true' && format('
            <b>OCI 虛擬機器建立 - 操作取消</b>
            • <b>觸發方式:</b> {0}
            • <b>執行時間:</b> {1}
            • <b>狀態:</b> 🟡 已跳過
            • <b>原因:</b> 名為 "{2}" 的虛擬機器已存在或檢查時出錯。
            • <b>區域:</b> {3}
            • <b>詳情:</b> <a href="https://github.com/{4}/actions/runs/{5}">查看日誌</a>', github.event_name == 'workflow_dispatch' && '手動觸發' || '定時任務', needs.create-vm.outputs.time, needs.create-vm.outputs.checked_vm_name, env.OCI_REGION, github.repository, github.run_id) || format('
            <b>OCI 虛擬機器建立結果</b>
            • <b>觸發方式:</b> {0}
            • <b>執行時間:</b> {1}
            • <b>狀態:</b> {2}
            • <b>嘗試次數:</b> {3}
            • <b>訊息:</b> {4}
            • <b>區域:</b> {5}
            • <b>詳情:</b> <a href="https://github.com/{6}/actions/runs/{7}">查看日誌</a>
            {8}', github.event_name == 'workflow_dispatch' && '手動觸發' || '定時任務', needs.create-vm.outputs.time, needs.create-vm.outputs.creation_status == 'true' && '✅ 成功' || '❌ 失敗', needs.create-vm.outputs.attempt_count, needs.create-vm.outputs.creation_status == 'true' && 'VM 創建成功' || needs.create-vm.outputs.error_message, env.OCI_REGION, github.repository, github.run_id, needs.create-vm.outputs.creation_status == 'true' && format('
            <b>VM 資訊</b>
            • <b>虛擬機器名稱:</b> {0}
            • <b>公網 IP:</b> {1}', needs.create-vm.outputs.vm_name, needs.create-vm.outputs.public_ip) || '') }}
