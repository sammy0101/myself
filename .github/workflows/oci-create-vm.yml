name: '[Scheduled] Create OCI A1 Flex VM'

on:
  # 每天 UTC 時間 0 點和 12 點各運行一次
  schedule:
    - cron: '0 0,12 * * *'
  # 保留手動觸發功能
  workflow_dispatch:
    inputs:
      vm-name:
        description: '虛擬機器的名稱'
        required: true
        default: 'a1-flex-vm'
        type: string

env:
  HK_TIME: ${{ steps.get-time.outputs.hk_time }}

jobs:
  create-vm:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: 計算香港時間
        id: get-time
        run: |
          HK_TIME=$(TZ='Asia/Hong_Kong' date +'%Y-%m-%d %H:%M:%S %Z')
          echo "hk_time=$HK_TIME" >> $GITHUB_OUTPUT
          echo "香港時間: $HK_TIME"

      - name: 設置 Python 和 OCI CLI
        run: |
          # 檢查 Python 版本 (OCI CLI 需要 Python 3.6+)
          echo "目前 Python 版本: $(python3 --version)"
          python3 -c "import sys; assert sys.version_info >= (3, 6), 'Python 3.6+ required'; print('✅ Python 版本符合要求')"
          
          # 安裝指定版本的 OCI CLI (使用最新穩定版)
          pip install oci-cli --user
          
          # 將使用者站點包添加到 PATH
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          
          # 驗證安裝
          oci --version
          echo "✅ OCI CLI 版本: $(oci --version)"

      - name: 安裝必要依賴
        run: |
          sudo apt-get update
          sudo apt-get install -y curl dnsutils jq

      - name: 配置 OCI CLI
        run: |
          mkdir -p ~/.oci
          cat > ~/.oci/config << EOF
          [DEFAULT]
          user=${{ secrets.OCI_USER_ID }}
          fingerprint=${{ secrets.OCI_FINGERPRINT }}
          key_file=~/.oci/oci_api_key.pem
          tenancy=${{ secrets.OCI_TENANCY }}
          region=${{ secrets.OCI_REGION }}
          EOF
          
          cat > ~/.oci/oci_api_key.pem << EOF
          ${{ secrets.OCI_API_KEY }}
          EOF
          
          chmod 600 ~/.oci/config ~/.oci/oci_api_key.pem

      - name: 顯示當前配置
        run: |
          echo "目前時間: ${{ env.HK_TIME }}"
          echo "目前配置:"
          echo "區域: ${{ secrets.OCI_REGION }}"
          echo "可用性網域: ${{ secrets.OCI_AVAILABILITY_DOMAIN }}"
          echo "實例規格: VM.Standard.A1.Flex (4 OCPU, 24GB RAM)"
          echo "OCI CLI 版本: $(oci --version)"

      - name: 生成 cloud-init 腳本用於 root 登入
        run: |
          cat > cloud-init.txt << 'EOF'
          #cloud-config
          users:
            - name: root
              password: $ROOT_PASSWORD
              lock_passwd: false
          chpasswd:
            list: |
              root:$ROOT_PASSWORD
            expire: false
          runcmd:
            - sed -i 's/#PermitRootLogin yes/PermitRootLogin yes/g' /etc/ssh/sshd_config
            - sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config
            - systemctl restart sshd
            - apt-get update && apt-get install -y openssh-server
          EOF
          
          sed -i "s/\$ROOT_PASSWORD/${{ secrets.ROOT_PASSWORD }}/g" cloud-init.txt

      - name: 初始化嘗試參數
        id: init
        run: |
          # 決定虛擬機器名稱
          if [ -n "${{ github.event.inputs.vm-name }}" ]; then
            VM_NAME="${{ github.event.inputs.vm-name }}"
          else
            VM_NAME="scheduled-a1-vm-$(date +%Y%m%d-%H%M)"
          fi
          
          # 檢查名稱是否已存在，如果存在則添加隨機後綴
          EXISTING_INSTANCE=$(oci compute instance list \
            --compartment-id "${{ secrets.OCI_COMPARTMENT_ID }}" \
            --display-name "$VM_NAME" \
            --query "data[0].id" \
            --raw-output)
          
          if [ -n "$EXISTING_INSTANCE" ] && [ "$EXISTING_INSTANCE" != "null" ]; then
            echo "名稱 '$VM_NAME' 已存在，添加隨機後綴"
            RANDOM_SUFFIX=$(head /dev/urandom | tr -dc a-z0-9 | head -c 4)
            VM_NAME="${VM_NAME}-${RANDOM_SUFFIX}"
          fi
          
          echo "vm_name=$VM_NAME" >> $GITHUB_OUTPUT
          echo "max_attempts=3" >> $GITHUB_OUTPUT
          echo "current_attempt=0" >> $GITHUB_OUTPUT
          echo "should_retry=true" >> $GITHUB_OUTPUT

      - name: 虛擬機器建立循環
        id: vm-creation-loop
        run: |
          # 設置初始參數
          MAX_ATTEMPTS=${{ steps.init.outputs.max_attempts }}
          CURRENT_ATTEMPT=${{ steps.init.outputs.current_attempt }}
          SHOULD_RETRY=${{ steps.init.outputs.should_retry }}
          VM_NAME="${{ steps.init.outputs.vm_name }}"
          
          # 重試參數配置
          RETRY_DELAY=300  # 5分鐘
          
          while [ $CURRENT_ATTEMPT -lt $MAX_ATTEMPTS ] && [ "$SHOULD_RETRY" = "true" ]; do
            CURRENT_ATTEMPT=$((CURRENT_ATTEMPT + 1))
            echo "--- 嘗試第 $CURRENT_ATTEMPT 次建立 ---"
            
            # 執行 OCI 命令建立虛擬機器，並捕獲 JSON 輸出
            output=$(oci compute instance launch \
              --compartment-id "${{ secrets.OCI_COMPARTMENT_ID }}" \
              --availability-domain "${{ secrets.OCI_AVAILABILITY_DOMAIN }}" \
              --display-name "$VM_NAME" \
              --shape "VM.Standard.A1.Flex" \
              --shape-config '{"ocpus": 4, "memoryInGBs": 24}' \
              --image-id "${{ secrets.OCI_IMAGE_OCID }}" \
              --subnet-id "${{ secrets.OCI_SUBNET_ID }}" \
              --assign-public-ip true \
              --user-data-file ./cloud-init.txt \
              --output json 2>&1)
            
            exit_code=$?
            
            if [ $exit_code -eq 0 ]; then
              # 從 JSON 輸出中提取實例 OCID
              INSTANCE_OCID=$(echo "$output" | jq -r '.data.id')
              
              if [ -n "$INSTANCE_OCID" ] && [ "$INSTANCE_OCID" != "null" ]; then
                echo "✅ 虛擬機器建立成功 (第 $CURRENT_ATTEMPT 次嘗試)"
                echo "success=true" >> $GITHUB_OUTPUT
                echo "instance_ocid=$INSTANCE_OCID" >> $GITHUB_OUTPUT
                echo "current_attempt=$CURRENT_ATTEMPT" >> $GITHUB_OUTPUT
                
                # 提取成功訊息
                success_msg=$(echo "$output" | jq -r '.message // "虛擬機器建立成功"' 2>/dev/null || echo "虛擬機器建立成功")
                echo "success_message=$success_msg" >> $GITHUB_OUTPUT
                
                # 成功後停止重試
                SHOULD_RETRY="false"
                echo "should_retry=false" >> $GITHUB_OUTPUT
                break
              else
                echo "❌ 無法從輸出中解析 Instance OCID"
                error_msg="無法從OCI回應中解析實例ID"
                echo "error_message=$error_msg" >> $GITHUB_OUTPUT
              fi
            else
              echo "❌ 第 $CURRENT_ATTEMPT 次嘗試失敗，退出碼: $exit_code"
              echo "錯誤輸出: $output"
              
              # 使用 jq 提取錯誤訊息
              if echo "$output" | jq -e . >/dev/null 2>&1; then
                error_msg=$(echo "$output" | jq -r '.message // "未知錯誤"')
              else
                # 如果輸出不是 JSON，則使用 grep 提取
                error_msg=$(echo "$output" | grep -o '"message": "[^"]*"' | head -1 | cut -d'"' -f4 || echo "未知錯誤")
              fi
              
              echo "error_message=$error_msg" >> $GITHUB_OUTPUT
              
              # 檢查錯誤類型
              if echo "$output" | grep -qi "TooManyRequests\|Too many requests"; then
                echo "檢測到 TooManyRequests 錯誤，停止重試"
                ERROR_TYPE="too_many_requests"
                SHOULD_RETRY="false"
                echo "should_retry=false" >> $GITHUB_OUTPUT
              elif echo "$output" | grep -Ei "out of host capacity|insufficientcapacity|outofcapacity|service limit exceeded|limit exceeded|capacity not available|not available|host capacity"; then
                ERROR_TYPE="capacity_error"
              elif echo "$output" | grep -Ei "quota|limit|notavailable|free tier|insufficient|over quota"; then
                ERROR_TYPE="quota_error"
                # 配額錯誤重試無意義
                SHOULD_RETRY="false"
                echo "should_retry=false" >> $GITHUB_OUTPUT
              elif echo "$output" | grep -Ei "timeout|connection|request timed out"; then
                ERROR_TYPE="network_error"
              else
                ERROR_TYPE="other_error"
              fi
              
              # 儲存錯誤資訊
              echo "error_type=$ERROR_TYPE" >> $GITHUB_OUTPUT
            fi
            
            # 更新當前嘗試次數
            echo "current_attempt=$CURRENT_ATTEMPT" >> $GITHUB_OUTPUT
            
            # 如果不是最後一次嘗試且需要重試，則等待
            if [ $CURRENT_ATTEMPT -lt $MAX_ATTEMPTS ] && [ "$SHOULD_RETRY" = "true" ]; then
              echo "等待 $RETRY_DELAY 秒後重試..."
              sleep $RETRY_DELAY
            fi
          done
          
          # 如果所有嘗試都失敗
          if [ "$SHOULD_RETRY" = "true" ]; then
            echo "success=false" >> $GITHUB_OUTPUT
          fi

      - name: 發送 Telegram 通知
        id: send-telegram
        if: always()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            ${{ github.event_name == 'workflow_dispatch' && '手動觸發' || '定時任務' }} OCI 虛擬機器建立通知
            • 時間: ${{ env.HK_TIME }}
            • 嘗試: 第 ${{ steps.vm-creation-loop.outputs.current_attempt }} 次
            • 狀態: ${{ steps.vm-creation-loop.outputs.success == 'true' && '成功' || '失敗' }}
            • 訊息: ${{ steps.vm-creation-loop.outputs.success == 'true' && steps.vm-creation-loop.outputs.success_message || steps.vm-creation-loop.outputs.error_message }}
            • 區域: ${{ secrets.OCI_REGION }}
            ${{ steps.vm-creation-loop.outputs.success != 'true' && steps.vm-creation-loop.outputs.current_attempt < steps.init.outputs.max_attempts && steps.vm-creation-loop.outputs.should_retry == 'true' && '• 下次嘗試: 5分鐘後' || '' }}
            ${{ steps.vm-creation-loop.outputs.error_type == 'too_many_requests' && '• 注意: 遇到 TooManyRequests 錯誤，已停止嘗試' || '' }}
          format: html

      - name: 等待實例達到 RUNNING 狀態
        if: steps.vm-creation-loop.outputs.success == 'true'
        id: wait-for-running
        run: |
          INSTANCE_OCID="${{ steps.vm-creation-loop.outputs.instance_ocid }}"
          echo "等待實例 $INSTANCE_OCID 進入 RUNNING 狀態..."
          
          # 設置輪詢參數（延長到10分鐘以容納 cloud-init 執行時間）
          MAX_ATTEMPTS=60  # 最多嘗試60次 (10分鐘)
          SLEEP_INTERVAL=10  # 每次間隔10秒
          attempt=1
          
          while [ $attempt -le $MAX_ATTEMPTS ]; do
            # 使用精確的實例OCID查詢當前狀態
            CURRENT_STATE=$(oci compute instance get \
              --instance-id "$INSTANCE_OCID" \
              --query 'data."lifecycle-state"' \
              --raw-output 2>/dev/null || echo "UNKNOWN")
            
            echo "狀態檢查 $attempt/$MAX_ATTEMPTS: 當前狀態為 '$CURRENT_STATE'"
            
            if [ "$CURRENT_STATE" = "RUNNING" ]; then
              echo "✅ 實例現在處於 RUNNING 狀態"
              echo "running=true" >> $GITHUB_OUTPUT
              break
            fi
            
            if [ $attempt -eq $MAX_ATTEMPTS ]; then
              echo "❌ 實例未在超時時間內達到 RUNNING 狀態"
              echo "running=false" >> $GITHUB_OUTPUT
              break
            fi
            
            sleep $SLEEP_INTERVAL
            ((attempt++))
          done

      - name: 獲取虛擬機器公網 IP
        if: steps.vm-creation-loop.outputs.success == 'true' && steps.wait-for-running.outputs.running == 'true'
        id: get-ip
        run: |
          INSTANCE_OCID="${{ steps.vm-creation-loop.outputs.instance_ocid }}"
          echo "獲取實例的公網 IP: $INSTANCE_OCID"
          
          # 使用精確的實例OCID查詢公網IP
          PUBLIC_IP=$(oci compute instance get \
            --instance-id "$INSTANCE_OCID" \
            --query 'data."public-ip"' \
            --raw-output)
          
          # 檢查獲取到的IP是否有效
          if [ -z "$PUBLIC_IP" ] || [ "$PUBLIC_IP" = "null" ]; then
            echo "❌ 無法獲取有效的公網IP地址。可能尚未分配。"
            echo "public_ip=unknown" >> $GITHUB_OUTPUT
          else
            echo "public_ip=$PUBLIC_IP" >> $GITHUB_OUTPUT
            echo "✅ 虛擬機器公網 IP: $PUBLIC_IP"
          fi

      - name: 發送最終結果 Telegram 通知
        id: send-telegram-final
        if: always()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            ${{ github.event_name == 'workflow_dispatch' && '手動觸發' || '定時任務' }} OCI 虛擬機器建立最終結果
            • 時間: ${{ env.HK_TIME }}
            • 狀態: ${{ steps.vm-creation-loop.outputs.success == 'true' && '成功' || '失敗' }}
            • 嘗試次數: ${{ steps.vm-creation-loop.outputs.current_attempt }}
            • 訊息: ${{ steps.vm-creation-loop.outputs.success == 'true' && steps.vm-creation-loop.outputs.success_message || steps.vm-creation-loop.outputs.error_message }}
            ${{ steps.vm-creation-loop.outputs.success == 'true' && steps.wait-for-running.outputs.running == 'true' && format('• 公網 IP: {0}', steps.get-ip.outputs.public_ip) || '' }}
            ${{ steps.vm-creation-loop.outputs.error_type == 'too_many_requests' && '• 注意: 遇到 TooManyRequests 錯誤，已停止嘗試' || '' }}
            • 區域: ${{ secrets.OCI_REGION }}
            • 詳情: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          format: html

      - name: 處理最終結果
        if: always()
        run: |
          echo "=== 執行結果彙總 ==="
          echo "執行時間: ${{ env.HK_TIME }}"
          echo "執行模式: ${{ github.event_name }}"
          
          if [[ "${{ steps.vm-creation-loop.outputs.success }}" == "true" ]]; then
            if [[ "${{ steps.wait-for-running.outputs.running }}" == "true" ]]; then
              echo "✅ 工作流執行成功: 虛擬機器已建立並配置"
              echo "虛擬機器名稱: ${{ steps.init.outputs.vm_name }}"
              echo "公網 IP: ${{ steps.get-ip.outputs.public_ip }}"
              echo "嘗試次數: ${{ steps.vm-creation-loop.outputs.current_attempt }}"
            else
              echo "⚠️  虛擬機器已建立但未達到 RUNNING 狀態"
              echo "虛擬機器 OCID: ${{ steps.vm-creation-loop.outputs.instance_ocid }}"
              echo "請稍後在 OCI 控制台中檢查狀態"
            fi
          else
            echo "❌ 工作流執行失敗: 虛擬機器建立未成功"
            echo "嘗試次數: ${{ steps.vm-creation-loop.outputs.current_attempt }}"
            echo "錯誤訊息: ${{ steps.vm-creation-loop.outputs.error_message }}"
            echo "錯誤類型: ${{ steps.vm-creation-loop.outputs.error_type }}"
            
            if [[ "${{ steps.vm-creation-loop.outputs.error_type }}" == "too_many_requests" ]]; then
              echo ""
              echo "💡 遇到 TooManyRequests 錯誤，已停止嘗試"
              echo "建議等待一段時間後再手動觸發工作流"
            elif [[ "${{ steps.vm-creation-loop.outputs.error_type }}" == "capacity_error" ]]; then
              echo ""
              echo "💡 Oracle Cloud 免費帳戶建立虛擬機器失敗建議:"
              echo "1. 嘗試使用不同的可用性網域"
              echo "2. 稍後重試 (幾小時或第二天)
              echo "3. 考慮使用不同的區域"
              echo "4. 嘗試建立較小配置的實例"
            fi
          fi
